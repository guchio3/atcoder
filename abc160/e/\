use std::io::stdin;

fn main() {
    let mut s = String::new();

    stdin().read_line(&mut s).ok();
    let nums: Vec<i32> = s
        .trim()
        .split_whitespace()
        .map(|x| x.parse().unwrap())
        .collect();
    s.clear();
    let x = nums[0];
    let y = nums[1];

    stdin().read_line(&mut s).ok();
    let mut ps: Vec<i32> = s
        .trim()
        .split_whitespace()
        .map(|x| x.parse().unwrap())
        .collect();
    s.clear();
    // ps.sort_by(|m, n| n.cmp(m));
    ps.sort();
    ps.reverse();
    ps = ps[0..(x as usize)].to_vec();

    stdin().read_line(&mut s).ok();
    let mut qs: Vec<i32> = s
        .trim()
        .split_whitespace()
        .map(|x| x.parse().unwrap())
        .collect();
    s.clear();
    // qs.sort_by(|m, n| n.cmp(m));
    qs.sort();
    qs.reverse();
    qs = qs[0..(y as usize)].to_vec();

    stdin().read_line(&mut s).ok();
    let mut rs: Vec<i32> = s
        .trim()
        .split_whitespace()
        .map(|x| x.parse().unwrap())
        .collect();
    s.clear();
    rs.sort();

    ps.append(&mut qs);
    ps.sort();

    // let mut res_i: Option<usize> = None;
    // for i in 0..rs.len() {
    //     if rs[i] > ps[i] {
    //         res_i = Some(i);
    //     } else {
    //         break;
    //     }
    // }

    // rs.reverse();

    // let res: i32;
    // if let None = res_i {
    //     res = ps.iter().sum::<i32>();
    // } else {
    //     println!("{:?}", &ps[res_i.unwrap() + 1..]);
    //     println!("{:?}", &rs[..res_i.unwrap() + 1]);
    //     res = (ps[res_i.unwrap() + 1..].iter().sum::<i32>()
    //         + rs[..res_i.unwrap() + 1].iter().sum::<i32>()) as i32;
    // }

    // 後は、要は bottom rs.len() 個の ps について
    // allignment の問題
    let mut switch_cnt = 0;
    let mut rs_i = 0;
    for ps_item in ps.iter_mut() {
        while rs_i < rs.len() {
            if ps_item < &mut rs[rs_i] {
                // *ps_item = rs[rs_i];
                switch_cnt += 1;
                rs_i += 1;
                break;
            }
            rs_i += 1;
        }
        break;
    }
    rs.reverse();

    let res: i32;
    if switch_cnt == 0 {
        res = ps.iter().sum::<i32>();
    } else {
        println!("{:?}", &ps[res_i.unwrap() + 1..]);
        println!("{:?}", &rs[..res_i.unwrap() + 1]);
        res = (ps[res_i.unwrap() + 1..].iter().sum::<i32>()
            + rs[..res_i.unwrap() + 1].iter().sum::<i32>()) as i32;
    }

    //     for res_elem in ps.iter_mut() {
    //         for rs_i in 0..rs.len() {
    //             if rs[i] {
    //                 rs = rs[rs_i..].to_vec();
    //                 break;
    //             }
    //         }
    //     }
    //
    //
    //
    //         if rs.len() > 0 {
    //             if *res_item < *rs.peek().unwrap() {
    //                 *res_item = rs.pop().unwrap();
    //             } else {
    //                 break;
    //             }
    //         } else {
    //             break;
    //         }
    //     }

    println!("{}", res);
}
